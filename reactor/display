-- reactor display
--Active: yes/no      Power: XMRF
--Control Rod: xx%    Prod: XRF/t
--                    Used: XRF/t
--Core Temp: xC    Frame Temp: xC
--Fuel: xb              waste: xb
--##################### #########


local function tern(cond, T, F)
  if cond then return T else return F end
end

os.loadAPI("reactor/monitor")
local width, height = monitor.getSize()

print('size: ' .. width .. ', ' .. height)

if height < 6 then
  monitor.write("Warning: Monitor not tall enough for this program")
  sleep(2.5)
end

local function put_left(text, current_text)
  return text .. string.sub(current_text, string.len(text) + 1)
end

local function put_right(text, current_text)
  return string.sub(current_text, 1, -(string.len(text) + 1)) .. text
end

local function get_line(c)
  c = c or ' '
  return string.rep(c, width)
end

local function get_notation(level)
  if level == -1 then
    return 'm'
  elseif level == 0 then
    return ''
  elseif level == 1 then
    return 'k'
  elseif level == 2 then
    return 'M'
  end
end

local function get_base(num)
  return math.floor(math.log(math.abs(num)) / math.log(1000))
end

local function round(num, place)
  place = place or 1
  return math.floor(math.exp(10, place) * num + 0.5) / math.exp(10, place)
end

local function notate(number, base)
  base = base or 0
  if number < 1000 then
    return round(number), get_notation(base)
  elseif number < 1000000 then
    return round(number / 1000, 2), get_notation(base + 1)
  else
    return round(number / 1000000, 2), get_notation(base + 2)
  end
end

local function color_text(text, color)
  return string.rep(color, string.len(tostring(text)))
end

local function color_notate(text, color)
  if text ~= '' then
    return color or '0'
  end
  return ''
end

function update(reactor, delta_energy)
  local active = reactor.getActive()
  local storage = reactor.getEnergyStored()
  local produce = reactor.getEnergyProducedLastTick()
  local used = produce - delta_energy / 20
  local control_rod = reactor.getControlRodLevel(0)
  local core_temp = reactor.getFuelTemperature()
  local case_temp = reactor.getCasingTemperature()
  local fuel = reactor.getFuelAmount()
  local waste = reactor.getWasteAmount()
  local max_fuel = reactor.getFuelAmountMax()
  
  local line = get_line()
  local color_line = get_line('0')
  
  monitor.clear()
  monitor.setCursorPos(1,1)
  
  monitor.print("active: " .. active)
  monitor.print("rod: " .. control_rod .. '%')
  monitor.print("fuel: " .. fuel)
  monitor.print("storage: " .. storage)
  monitor.print("produce: " .. produce)
  monitor.print("used: " .. used)
  
end
